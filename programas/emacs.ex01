(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:stipple nil :background "black" :foreground "white" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 90 :width normal :family "adobe-courier")))))

;; =============================================================================
;; paths
;; =============================================================================
(add-to-list 'load-path "~/.emacs.d/")
(add-to-list 'load-path "~/.emacs.d/lisp/")
(add-to-list 'load-path "~/.emacs.d/lisp/yasnippet")

;; =============================================================================
;; configurar ficheros de backup
;; =============================================================================
(setq version-control t never)
(setq delete-old-versions t)
(setq backup-directory-alist (quote ((".*" . "~/.emacs.d/backups/"))))
(setq auto-save-timeout 1200)

;; =============================================================================
;; autocompletado (con diccionario sacado de los ficheros abiertos)
;; =============================================================================
(define-key global-map (read-kbd-macro "M-RET") 'hippie-expand)

;; =============================================================================
;; configuraciones varias
;; =============================================================================
(setq frame-title-format "emacs - %b")
(setq inhibit-startup-message t)
(line-number-mode 1)
(column-number-mode 1)
(display-time)
(transient-mark-mode t)
;; hide bars
(tool-bar-mode -1)
(menu-bar-mode -1)
;; scroll just one line when hitting the bottom of the window
(setq scroll-step 1)
(setq scroll-conservatively 1)
(setq ident-tabs-mode nil)
(setq tab-width 4)
(setq default-tab-width 4)
(setq-default fill-column 80)
(load "dired-x")
(setq desktop-save 'if-exists)
(desktop-save-mode 1)
(setq desktop-globals-to-save
      (append '((extended-command-history . 30)
        (file-name-history        . 100)
        (grep-history             . 30)
        (compile-history          . 30)
        (minibuffer-history       . 50)
        (query-replace-history    . 60)
        (read-expression-history  . 60)
        (regexp-history           . 60)
        (regexp-search-ring       . 20)
        (search-ring              . 20)
        (shell-command-history    . 50)
        tags-file-name
        register-alist)))


;;recentf
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-saved-items 50)
(setq recentf-max-menu-items 30)
(global-set-key [(meta f12)] 'recentf-open-files)

;; minimap
(require 'minimap)
(global-set-key [(meta f5)] 'minimap-create)
(global-set-key [(meta f6)] 'minimap-kill)


;; Auto-complete config
(require 'auto-complete)
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(set-cursor-color "white")
(global-set-key [(meta f1)] 'auto-complete-mode)


(define-key global-map (read-kbd-macro "C-c w") 'whitespace-cleanup)

;; Anything configuration
(require 'anything-match-plugin)
(require 'anything-config)
(define-key global-map (read-kbd-macro "C-c a") 'anything)
(define-key global-map (read-kbd-macro "C-c i") 'anything-imenu)
(define-key global-map (read-kbd-macro "C-c g") 'anything-google-suggest)

;; Yasnippet configuration
(require 'yasnippet)
(yas-global-mode 1)
(define-key global-map (read-kbd-macro "C-c y") 'yas/insert-snippet)

;; =============================================================================
;; C/C++
;; =============================================================================
(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
(setq tab-width 4)
(setq c-basic-offset 4)

;; =============================================================================
;; Haskell
;; =============================================================================
(setq auto-mode-alist
      (append auto-mode-alist
          '(("\\.[hg]s$"  . haskell-mode)
        ("\\.hi$"     . haskell-mode)
        ("\\.chs$"    . haskell-mode)
        ("\\.l[hg]s$" . literate-haskell-mode))))
(defun my-haskell-mode-hook ()
  (turn-on-haskell-ghci))
(add-hook 'haskell-mode-hook 'my-haskell-mode-hook)

(autoload 'glsl-mode "glsl-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
(add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
