En los atajos de teclado
C       equivale a Control
M       equivale a ALT
<RET>   pulsar boton return

por ejemplo:
C+x C+s			        pulsar control+x y luego control+s
M+x funcion <RET>       pulsar ALT+x, escribir funcion y pulsar return

C+g          Cancelar un comando

C+x C+s      Salvar fichero
C+x C+f      Abrir fichero
C+x k        cerrar buffer
C+x b        cambiar al buffer anterior
C+x C+b      listar buffers abiertos
C+x C+c      cerrar emacs

M+x <funcion> <RET>      ejecutar <funcion> de emacs
M+x customize-face <RET> ejecuta la seleccion de fuente
M+x <len>-mode <RET>     cambiar el lenguaje actual a <len> ( p.e: c++-mode )
M+!          ejecutar comando shell

C+x 1        quitar pantalla partida
C+x 2        partir pantalla horizontalmente
C+x 3        partir pantalla verticalmente
C+x o        cambiar de pantalla

C+space      marca inicio de bloque, donde esta el cursor actualmente
M+w          copiar desde el inicio del bloque hasta posicion del cursor
C+w          cortar deste el inicio del bloque hasta posicion del cursor
C+y          pegar
C+_          undo
C+x h        selecciona todo el buffer

C+x r k      cortar el rectangulo seleccionado
C+x r d      borrar el rectangulo seleccionad
C+x r y      copiar el rectangulo seleccionado
C+x r c      limpiar el rectangulo seleccionado

C+x l        da el numero de lineas del fichero
M+g g        ir a la linea

C+h b        muestra los accesos de teclados actuales

Comandos de Subversion
M+x svn-status  obtener estado de svn de un directorio
C+x M+s s       obtener estado de svn de directorio actual abre *svn-status*
g		        (*svn-status*) actualizar ventana
<RET>		    (*svn-status*) editar el fichero del cursor
m		        (*svn-status*) marca archivo selecionado
u		        (*svn-status*) quita marca en archivo seleccionado
c               (*svn-status*) commit (archivos marcados si hay)
r		        (*svn-status*) revert
U		        (*svn-status*) update
l		        (*svn-status*) log
=		        (*svn-status*) diff
$		        (*svn-status*) expande/oculta directorio


Cambiar el encoding / lineas final de carro
M+x set-buffer-file-coding-system   escribir mac, dos o unix
(Ctrl+x Enter f)

FUNCIONES UTILES (M+x)

global-auto-revert-mode      fija recarga automatica de ficheros modificados



Configuracion de .emacs
;; =============================================================================
;; FONT
;; move fonts ttf to ~/.local/share/fonts
;; run $ fc-cache --verbose
;; or install, e.g:  apt-get install fonts-mplus fonts-inconsolata
;; Find font running on shell: $  fc-list | grep -i "name"
;; E.g:  M+ , Inconsolata, ProggyClean, ProFont
;; =============================================================================
(set-frame-font "ProggyCleanTT")
(set-face-attribute 'default (selected-frame) :height 100)
(set-face-attribute 'default (selected-frame) :foreground "white")
(set-face-attribute 'default (selected-frame) :background "black")

;; =============================================================================
;; configurar ficheros de backup
;; =============================================================================
(setq version-control t never)
(setq delete-old-versions t)
(setq backup-directory-alist (quote ((".*" . "~/.emacs_backups/"))))


;; =============================================================================
;; autocompletado (con diccionario sacado de los ficheros abiertos)
;; =============================================================================
(define-key global-map (read-kbd-macro "M-RET") 'hippie-expand)


;; =============================================================================
;; configuraciones varias
;; =============================================================================
(setq frame-title-format "emacs - %b")
(setq inhibit-startup-message t)
(line-number-mode 1)
(column-number-mode 1)
(display-time)
(transient-mark-mode t)
;; hide bars
(tool-bar-mode -1)
(menu-bar-mode -1)
;; scroll just one line when hitting the bottom of the window
(setq scroll-step 1)
(setq scroll-conservatively 1)
;; use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Bind M-F12 to recentf-open-files
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-saved-items 500)
(setq recentf-max-menu-items 60)
(global-set-key [(meta f12)] 'recentf-open-files)

;;Bind M-F12 to recentf-open-files
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-saved-items 200)
(setq recentf-max-menu-items 50)
(global-set-key [(meta f12)] 'recentf-open-files)

;; Anything configuration
(require 'anything-match-plugin)
(require 'anything-config)
(global-set-key [(meta f2)] 'anything)
(global-set-key [(meta f3)] 'anything-imenu)

;; Start autocomplete in buffer
(global-set-key [(meta f1)] 'auto-complete-mode)
(add-to-list 'load-path "~/.emacs.d/")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(set-cursor-color "white")

;; Line compress
(make-face 'mundane-line-face)
(set-face-attribute 'mundane-line-face nil :height 0.7)

;; Then in a prog-mode hook:
(defun add-mundane-line-font-lock ()
  (setq font-lock-multiline t)
  (font-lock-add-keywords nil '(("^[ \t]*\n" 0
                                 'mundane-line-face prepend))))
;; add to each program
;; (add-hook 'prog-mode-hook 'add-mundane-line-font-lock)

;; =============================================================================
;; Highlight changes in buffer
;; =============================================================================
(defun clear-highlight ()
  (interactive)
  (if (boundp 'highlight-changes-mode)
      (highlight-changes-remove-highlight (point-min) (point-max))))

(define-key global-map (read-kbd-macro "<f3>") 'highlight-changes-mode)
(define-key global-map (read-kbd-macro "<f4>") 'clear-highlight)


;; =============================================================================
;; editar en remoto con ssh (requiere instalar tramp)
;; =============================================================================
(require 'tramp)
(setq tramp-default-method "scp")

;; =============================================================================
;; C++
;; =============================================================================
(add-hook 'c++-mode-hook 'add-mundane-line-font-lock)

;; =============================================================================
;; Haskell
;; =============================================================================
(setq auto-mode-alist
      (append auto-mode-alist
              '(("\\.[hg]s$"  . haskell-mode)
                ("\\.hi$"     . haskell-mode)
                ("\\.l[hg]s$" . literate-haskell-mode))))
(autoload 'haskell-mode "haskell-mode"
   "Major mode for editing Haskell scripts." t)
(autoload 'literate-haskell-mode "haskell-mode"
   "Major mode for editing literate Haskell scripts." t)

(defun my-haskell-mode-hook ()
  (turn-on-font-lock)
  (turn-on-haskell-decl-scan)
;;  (turn-on-haskell-doc)
  (turn-on-haskell-ghci))
(add-hook 'haskell-mode-hook 'my-haskell-mode-hook)


;; =============================================================================
;; LATEX
;; =============================================================================
(add-hook 'latex-mode-hook 'longlines-mode)
(add-hook 'latex-mode-hook 'highlight-changes-mode)
(add-hook 'latex-mode-hook 'flyspell-mode)

;; =============================================================================
;; Imprimir
;; =============================================================================
;; necesita xpp instalado
;; se imprime con    M+X lpr-buffer     ||     M+X lpr-region
(setq lpr-command "xpp")

;; =============================================================================
;; Set mode for file
;; =============================================================================
(setq auto-mode-alist (cons '("uc$" . c++-mode) auto-mode-alist))

(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
(setq tab-width 4)
(setq c-basic-offset 4)
